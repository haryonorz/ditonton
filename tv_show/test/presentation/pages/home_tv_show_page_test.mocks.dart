// Mocks generated by Mockito 5.1.0 from annotations
// in tv_show/test/presentation/pages/home_tv_show_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_show/presentation/cubit/now_playing_tv_shows/now_playing_tv_shows_cubit.dart'
    as _i5;
import 'package:tv_show/presentation/cubit/now_playing_tv_shows/now_playing_tv_shows_state.dart'
    as _i2;
import 'package:tv_show/presentation/cubit/popular_tv_shows/popular_tv_shows_cubit.dart'
    as _i8;
import 'package:tv_show/presentation/cubit/popular_tv_shows/popular_tv_shows_state.dart'
    as _i3;
import 'package:tv_show/presentation/cubit/top_rated_tv_shows/top_rated_tv_shows_cubit.dart'
    as _i9;
import 'package:tv_show/presentation/cubit/top_rated_tv_shows/top_rated_tv_shows_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNowPlayingTvShowsState_0 extends _i1.Fake
    implements _i2.NowPlayingTvShowsState {}

class _FakePopularTvShowsState_1 extends _i1.Fake
    implements _i3.PopularTvShowsState {}

class _FakeTopRatedTvShowsState_2 extends _i1.Fake
    implements _i4.TopRatedTvShowsState {}

/// A class which mocks [NowPlayingTvShowsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNowPlayingTvShowsCubit extends _i1.Mock
    implements _i5.NowPlayingTvShowsCubit {
  MockNowPlayingTvShowsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NowPlayingTvShowsState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeNowPlayingTvShowsState_0())
          as _i2.NowPlayingTvShowsState);
  @override
  _i6.Stream<_i2.NowPlayingTvShowsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.NowPlayingTvShowsState>.empty())
          as _i6.Stream<_i2.NowPlayingTvShowsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchData() => super.noSuchMethod(Invocation.method(#fetchData, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i2.NowPlayingTvShowsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i2.NowPlayingTvShowsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [PopularTvShowsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularTvShowsCubit extends _i1.Mock
    implements _i8.PopularTvShowsCubit {
  MockPopularTvShowsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PopularTvShowsState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakePopularTvShowsState_1()) as _i3.PopularTvShowsState);
  @override
  _i6.Stream<_i3.PopularTvShowsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.PopularTvShowsState>.empty())
          as _i6.Stream<_i3.PopularTvShowsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchData() => super.noSuchMethod(Invocation.method(#fetchData, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i3.PopularTvShowsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i3.PopularTvShowsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [TopRatedTvShowsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedTvShowsCubit extends _i1.Mock
    implements _i9.TopRatedTvShowsCubit {
  MockTopRatedTvShowsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TopRatedTvShowsState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeTopRatedTvShowsState_2()) as _i4.TopRatedTvShowsState);
  @override
  _i6.Stream<_i4.TopRatedTvShowsState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.TopRatedTvShowsState>.empty())
          as _i6.Stream<_i4.TopRatedTvShowsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchData() => super.noSuchMethod(Invocation.method(#fetchData, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i4.TopRatedTvShowsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i4.TopRatedTvShowsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
