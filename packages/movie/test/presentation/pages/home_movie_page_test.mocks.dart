// Mocks generated by Mockito 5.1.0 from annotations
// in movie/test/presentation/pages/home_movie_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/presentation/cubit/now_playing_movies/now_playing_movies_cubit.dart'
    as _i5;
import 'package:movie/presentation/cubit/now_playing_movies/now_playing_movies_state.dart'
    as _i2;
import 'package:movie/presentation/cubit/popular_movies/popular_movies_cubit.dart'
    as _i8;
import 'package:movie/presentation/cubit/popular_movies/popular_movies_state.dart'
    as _i3;
import 'package:movie/presentation/cubit/top_rated_movies/top_rated_movies_cubit.dart'
    as _i9;
import 'package:movie/presentation/cubit/top_rated_movies/top_rated_movies_state.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNowPlayingMoviesState_0 extends _i1.Fake
    implements _i2.NowPlayingMoviesState {}

class _FakePopularMoviesState_1 extends _i1.Fake
    implements _i3.PopularMoviesState {}

class _FakeTopRatedMoviesState_2 extends _i1.Fake
    implements _i4.TopRatedMoviesState {}

/// A class which mocks [NowPlayingMoviesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNowPlayingMoviesCubit extends _i1.Mock
    implements _i5.NowPlayingMoviesCubit {
  MockNowPlayingMoviesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NowPlayingMoviesState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeNowPlayingMoviesState_0())
          as _i2.NowPlayingMoviesState);
  @override
  _i6.Stream<_i2.NowPlayingMoviesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.NowPlayingMoviesState>.empty())
          as _i6.Stream<_i2.NowPlayingMoviesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchData() => super.noSuchMethod(Invocation.method(#fetchData, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i2.NowPlayingMoviesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i2.NowPlayingMoviesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [PopularMoviesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularMoviesCubit extends _i1.Mock
    implements _i8.PopularMoviesCubit {
  MockPopularMoviesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PopularMoviesState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakePopularMoviesState_1()) as _i3.PopularMoviesState);
  @override
  _i6.Stream<_i3.PopularMoviesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.PopularMoviesState>.empty())
          as _i6.Stream<_i3.PopularMoviesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchData() => super.noSuchMethod(Invocation.method(#fetchData, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i3.PopularMoviesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i3.PopularMoviesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [TopRatedMoviesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTopRatedMoviesCubit extends _i1.Mock
    implements _i9.TopRatedMoviesCubit {
  MockTopRatedMoviesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.TopRatedMoviesState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeTopRatedMoviesState_2()) as _i4.TopRatedMoviesState);
  @override
  _i6.Stream<_i4.TopRatedMoviesState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.TopRatedMoviesState>.empty())
          as _i6.Stream<_i4.TopRatedMoviesState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchData() => super.noSuchMethod(Invocation.method(#fetchData, []),
      returnValueForMissingStub: null);
  @override
  void emit(_i4.TopRatedMoviesState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i4.TopRatedMoviesState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
}
